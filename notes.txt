Ansible
=======

   Linux 
   Shell scripting
   SCM tools: git [github, bitbucket, gitlab]
   Build tools: maven, gradle, Ant
   Code quality: SonarQube
   Artifactory or repository tools: nexus, jfrog
   Application servers: tomcat, jboss, weblogic
   Web servers: Apache httpd, nginx, Haproxy
   CI CD tools: Jenkins, bomboo, travis ci
   Containerization tools: Docker, Rocket
   Container orchestration tools: K8s, openshift, docker-swarm

   Configuration management tools: Ansible, puppet, cheff 










NOTE:
By using configuration management tools , We can configure “N” number of servers using single machine [configuration server]


















Introduction
===========
   Ansible is an open source, a Configuration Management Tool and Deployment tool, maintained by Redhat.

   The main components of Ansible are playbooks, configuration management, deployment.

   Ansible uses playbooks to deploy, manage, build, test and configure anything from full server environments to custom compiled source code for applications.

   Ansible was written in Python.















Configuration can be any task which we can perform on servers (hosts). It can be

1)  Install/Update/Uninstalling software (packages)
2)  Copy files. Changing the permissions on the files or directories.
3)  Start/Stop/ Restart the services
4)  Creating / deleting the users..........




















Various Configuration Management Tools
======================================

•   Ansible
•   Chef
•   Puppet
•   Salt Stack










Ansible Features
================


   Ansible configure machines in an agent-less manner using SSH.
   Built on top of Python and hence provides a lot of Python’s functionality. YAML-Based Playbooks
   Uses SSH for secure connections.
   Follows Push based architecture for sending configurations.


IQ]   Pull Based vs Push Based

Tools like Puppet and Chef are pull based.
Agents on the server periodically checks for the configuration information from central server (Master).

Ansible is push based.
Central server pushes the configuration information on target servers. You control when the changes are made on the servers.













Ansible Architecture
=====================


https://www.google.com/search?sca_esv=8536d3cccb765549&sca_upv=1&rlz=1C1UEAD_enIN1101IN1102&sxsrf=ADLYWIK0P5dFDyf9SS8wj0ACVkOY-eTgQg:1727466226227&q=ansible+architecture&udm=2&fbs=AEQNm0DYVld7NGDZ8Pi819Yg8r6em07j6rW9d2jUMtr8MB7hthlxj_a5JB7GtKl9Rvi8UOrX6vOKeE8ctU8C4v5SDrHEsrgUOOFp5HvlkBZf4yVP83YajKnrlhAJvHG8uQnJWlvuYz8LvE_lwESvEPu-1v94fKd9xhS49UTuNSe7CMY7I5AuGmdDN0lv5iId0gIyD9wyA5aKEve0q31Gi2kwmyWtccpVrQ&sa=X&ved=2ahUKEwiolpqW8eOIAxW8R2wGHdidNlUQtKgLegQILRAB&biw=1440&bih=825&dpr=2#vhid=DpiNvVdi7i47aM&vssid=mosaic


Host Inventory:
===============


In Ansible, the host inventory is a file that defines the hosts (machines) that Ansible will manage. This file can be in various formats, but the most common is the INI format. You can also use YAML format for more complex structures.

Some important points in Inventory file.
-   Comments begin with the '#' character
-   Blank lines are ignored
-   Groups of hosts are delimited by [header] elements
-   You can enter hostnames or ip addresses
-   A hostname/ip can be a member of multiple groups
-   Ungrouped hosts are specifying before any group headers, like below

192.168.122.1
192.168.122.2
kkdevops.com
192.168.0.9


[webservers] 
#192.168.122.1
192.168.122.2
192.168.122.3
kkdevops.com


[dbservers]
192.168.122.4
192.168.122.5
192.168.122.2






--> We have two types of inventories

1. static inventory
-------------------
It is a file in the ansible server. It contains the host machine details, Whenever we want to add/remove server information we have to update the static inventory file manually.






2. dynamic inventory
--------------------


NOTE: default inventory path: /etc/ansible/hosts







PlayBooks
==========

-> An Ansible playbook is a YAML file that defines a set of tasks to be executed on one or more  hosts. 


Key Components of a Playbook
----------------------------

Plays: Each play in a playbook maps a group of hosts to a set of tasks. A playbook can contain multiple plays.

Tasks: These are the actions to be performed on the hosts. Each task typically uses an Ansible module to define what to do (e.g., installing a package, copying files, or executing commands).

Modules: Ansible comes with many built-in modules that provide functionality for managing different systems and services.

Variables: You can define variables within playbooks to manage values dynamically and make your playbooks more flexible.

Handlers: Handlers are special tasks that run only when notified by another task. They are often used for restarting services after a configuration change.

Conditionals and Loops: Playbooks support conditionals (e.g., when statements) and loops (e.g., with_items) to control the flow of tasks based on specific conditions or to iterate over a list.


Example:
--------

- name: Install Git on all servers
  hosts: all
  tasks:
    - name: Install Git
      yum:
        name: git
        state: present


Example:
--------

- name: Install Unzip on Database Servers
  hosts: dbservers
  tasks:
    - name: Install Unzip
      yum:
        name: unzip
        state: present



core modules
============

Playbook tasks can be implemented through core modules.

custom modules
==============

we can implement our own modules using the python, But thousands of predefined modules are available.




=====================================================


Ansible installation
====================

IQ] what are the prerequsites required to install ansible?

OS: linux
lang: python

NOTE: Using ansible we can configure the windows m/c, But ansible is not installed on windows.


step 1: create 3 redhat systems
-------

[1- Ansible system, 2- Host systems for demo] in AWS

ansible server: 172.31.25.139
Host machine 1: 172.31.28.214
Host machine 2: 172.31.18.245

step 2:
-------
 Login As a root user and create ansible user and provide sudo access in all Servers.

    2.1) Create the user ansible and set the password on all hosts:
           sudo useradd ansible
           sudo passwd ansible
     
    2.2) Make the necessary entry in sudoers file /etc/sudoers for ansible        
           user for password-less sudo access:
          
           visudo

           ansible ALL=(ALL) NOPASSWD: ALL

       

    2.3) Make the necessary changes  in sshd_config file /etc/ssh/sshd_config    
           to enable password based authentication.

         Un comment PasswordAuthentication yes
         and comment  PasswordAuthentication no.
         And save the file .

           sudo vi /etc/ssh/sshd_config

     2.4)    Then restart sshd service.
                sudo service sshd restart

==========



Run in the ansible server
-------------------------

sudo yum install ansible-core -y


sudo su - ansible

sudo vi /etc/ansible/hosts

[my_hosts]
172.31.4.10 ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/kkdevopsbl3b2.pem

172.31.15.109 ansible_ssh_user=ec2-user ansible_ssh_private_key_file=~/kkdevopsbl3b2.pem


NOTE: pls copy the pem file into linux server

ansible all -m ping

ansible all -m ping -o --> It will display in single line


===============================================================================

How to list the ansible modules
---------------------------------

ansible-doc -l  --> To list all the ansible modules.

ansible-doc -l |grep "copy"

ansible-doc copy ---> to see more about the module
ansible-doc yum
ansible-doc shell



some sample commands
====================

shell module
------------

ansible all -m shell -a "df -kh"       [ a means arguments]

ansible all -m shell -a "git --version"

NOTE: in ansible default module is "shell"

ansible all -m shell -a "uptime" or ansible all -a "uptime"


IQ] instead of checking all the servers how to check for specific servers like DB or app


ansible app -a "free -h"
ansible db -a "date"


yum module
----------

ansible all -b -m yum -a "name=git"

ansible all -b -m yum -a "name=java"

ansible all -a "java --version"










































ansible all -b -m yum -a "name=httpd state=present" --> Install httpd package in all node.

ansible all -b -m yum -a "name=httpd state=latest" --> to update the httpd packages

ansible all -b -m yum -a "name=httpd state=absent" --> to remove httpd package








service module
--------------

ansible 172.31.43.147 -b -m service -a "name=httpd state=started"

ansible all -b -m command -a "systemctl status httpd"


ansible all -b -m service -a "name=httpd state=restarted"

ansible all -b -m service -a "name=httpd state=stopped"










===================================================

requirement:
------------

1. Install httpd software in all the servers.
2. copy the index.html to all the servers.
3. start the httpd service.

Sol:
---------

1. ansible all -b -m yum -a "name=httpd state=present"

2. create index.html 

  ansible appserver -b -m copy -a "src=index.html dest=/var/www/html/index.html"

3. ansible all -b -m service -a "name=httpd state=started"


here disadvantage is we need to run the many commands, so we are going "playbooks"


Ansible playbooks
=================

--> we need write a playbook in the form of YAML

--> playbook is a single yaml file, which contains many plays

--> play is set of order tasks to execute in host machines

--> Task is a action to perform on host machines.

Example
=======

---
- hosts: all
  gather_facts: no 
  tasks:
  - name: pinging the host machines
    ping:
...





How to run a playbook?
------------------------

ansible-playbook ping.yaml

ansible-playbook ping.yaml --syntax-check


IQ] can you write a ansible play-book to create file to all host machines.


ansible all -b-m copy -a "src=security.py dest=/tmp/security.py" 

ansible all -b -m command -a "touch security.py"


---
- hosts: all
  become: true
  tasks:
  - name : creating a file in all host machines
    file:
      path: /tmp/security.py
      owner: ec2-user
      group: ec2-user
      mode: 0777
      state: touch  
...



---
- hosts: all
  become: true
  tasks:
  - name: installing httpd
    yum:
      name: httpd
      state: present
  - name: copying abc.html
    copy:
      src: abc.html
      dest: /var/www/html/abc.html
  - name: stating the httpd service
    service:
      name: httpd
      state: started 
...


==================================================

IQ] what is the difference between copy module and template module?

copy: copy will copy the file from local (ansible server) to remote machines.
template: template will copy file from local(ansible server) to remote(host) machines,It      replace the content using variables, while copying.


copy module
-----------
---
- name: Install and configure Apache HTTP server
  hosts: all  
  become: true 

  tasks:
    - name: Install httpd
      yum:  # Use yum for Red Hat/CentOS or dnf for newer versions
        name: httpd
        state: present

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true

    - name: Copy custom index.html to the web root
      copy:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server



template module
----------------

---
- name: Install and configure Apache HTTP server
  hosts: all  # Specify your target hosts group
  become: true  # Use sudo to install packages
  vars:
    location: "nellore"       # Change this to your server name
    date: "21-10-2024"  # Change this to your desired document root
  tasks:
    - name: Install httpd
      yum:  # Use yum for Red Hat/CentOS or dnf for newer versions
        name: httpd
        state: present

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true

    - name: Copy custom index.html to the web root
      template:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server


ansible-playbook name.yaml -e location="hyd"
  or
ansible-playbook name.yaml -e 'location=hyd phoneNo=99999999'

variables in ansible
=====================
IQ] can you explain varibles and its priority in ansible?

1. command line variables
2. variables in file
3. varibales in play-book
4. host-variables
5. group variables

another approach
----------------

step 1: create separate vars.yaml

     location: bang
     phoneNo: 9676831734

step 2: create index.html

    <h1> my location is {{location}}, mobile number is {{phoneNo}} batch date is {{date}}</h1>

step 3: create a playbook name.yaml

- name: Install and configure Apache HTTP server
  hosts: all  # Specify your target hosts group
  become: true  # Use sudo to install packages
  vars_files:
   - vars.yaml
  tasks:
    - name: Install httpd
      yum:  # Use yum for Red Hat/CentOS or dnf for newer versions
        name: httpd
        state: present

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true

    - name: Copy custom index.html to the web root
      template:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server



IQ] if i defined variables in plabook and vars.yaml which one will take?

  vars:
    location: "nellore"       
    date: "21-10-2024"
  vars_files:
   - vars.yaml

 ANS: play-book variables are less priority.

  runtime variables(-e) > variables in a file > playbook variables



group_vars
==========
In Ansible, group_vars is a powerful feature that allows you to define variables that apply to a group of hosts in your inventory. This is particularly useful for managing configurations that differ between different environments (like production and staging) or for organizing variables by application or role.

requirement:
-----------
install java 11 in prod
install java 8 in staging


step 1: create a dir in /var/ansible

  sudo  mkdir /var/ansible/group_vars
  
step 2: create /var/ansible/group_vars/prod.yaml

   javaVersion: java-11-openjdk-devel


step 3: create /var/ansible/host_vars/172.31.0.117.yaml

  javaVersion: java-1.8.0-openjdk-devel


step 4:

- hosts: all
  become: true
  gather_facts: no
  tasks:
    - name: Installing java
      yum:
        name: "{{ javaVersion }}"


NOTE: It is not installed for un grouped servers, so pls create all.yaml then place variable for ungrouped hosts.


host_vars
==========








  

 


=====================================

debug module in ansible
========================

The debug module in Ansible is a useful tool for outputting information during playbook execution. It helps you inspect variables, confirm task execution, and troubleshoot issues in your Ansible scripts.


Example
-------

---
- name: Debug Example Playbook
  hosts: localhost
  vars:
    app_name: "order-management"
    replica_count: 3
    resource_limits:
      cpu: "500m"
      memory: "512Mi"
    debug_enabled: true
    env: staging

  tasks:
    - name: Print application name
      debug:
        msg: "The application name is {{ app_name }}"

    - name: Print replica count
      debug:
        msg: "The replica count is {{ replica_count }}"

    - name: Print resource limits
      debug:
        msg: "CPU limit is {{ resource_limits.cpu }} and Memory limit is {{ resource_limits.memory }}"



==================================================================

Handlers in ansible
====================

IQ] what is the difference between tasks and handlers?

--> Tasks are executed in the order they are defined in the playbook. All tasks will run every time the playbook is executed, unless certain conditions (like when statements) are specified.


--> Handlers are only executed when notified by a task. If a task makes a change (e.g., installing a package or modifying a file) and issues a notification to a handler, the handler will run after all tasks have been processed.

--> handlers are special kind of tasks, It will not executed by default, until other tasks are notify.


--> Handlers will execute at end of the play.


Example
-------

- name: Install and configure Apache HTTP server
  hosts: all  # Specify your target hosts group
  become: true  # Use sudo to install packages
  vars_files:
   - vars.yaml
  tasks:
    - name: Install httpd
      yum:  # Use yum for Red Hat/CentOS or dnf for newer versions
        name: httpd
        state: present

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true

    - name: Copy custom index.html to the web root
      template:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server



with handlers
=============


- name: Install and configure Apache HTTP server
  hosts: all  
  gather_facts: no
  become: true  
  vars_files:
   - vars.yaml
  tasks:
    - name: Install httpd
      yum:  
        name: httpd
        state: present

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true

    - name: Copy custom index.html to the web root
      template:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server
      notify:
        - restarting httpd
  handlers:
    - name: restarting httpd
      service:
        name: httpd
        state: restarted


===============































Loops in ansible
=================

In Ansible, loops allow you to iterate over a list of items, making your playbooks more dynamic and reducing repetition.


without lopps
-------------

---
- name: Install packages without loops
  hosts: all
  become: yes
  tasks:
    - name: Install Git
      yum:
        name: git
        state: present

    - name: Install Zip
      yum:
        name: zip
        state: present

    - name: Install Vim
      yum:
        name: vim
        state: present

    - name: install unzip
      yum:
        name: unzip
        state: present


with-loops
----------
approach 1:

- name: Install packages with loops
  hosts: all
  become: yes
  tasks:
    - name: Install packages
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - zip
        - vim
        - unzip
        - tree












 approach 2:

 - name: Install packages with with_items
  hosts: all
  become: yes
  tasks:
    - name: Install packages
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - git
        - zip
        - vim
        - unzip


How to uninstall?
-----------------

- name: Uninstall packages with with_items
  hosts: all
  become: yes
  tasks:
    - name: Uninstall packages
      yum:
        name: "{{ item }}"
        state: absent
      with_items:
        - git
        - zip
        - vim
        - unzip



Assignment 
----------

--> create 5 users in all the machines using loops.

---
- name: Create users on all machines
  hosts: all
  become: yes  # Use 'become' to run commands as a superuser
  vars:
    users:
      - nagaraj
      - santhi
      - usha
      - niranjan
      - sathya

  tasks:
    - name: Ensure users are present
      user:
        name: "{{ item }}"
        state: present
      loop: "{{ users }}"









when condition in ansible
==========================



In Ansible, you can use the when condition to control whether a task should be executed based on a specific condition.

NOTE: take one ubuntu machine


ansible all -m setup

---
- name: Install HTTP server conditionally for Ubuntu and Red Hat
  hosts: all
  become: yes
  tasks:
    - name: Install Apache on Ubuntu
      apt:
        name: apache2
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Install Apache on Red Hat
      yum:
        name: httpd
        state: present
      when: ansible_distribution == "RedHat"

    - name: Start Apache service on Ubuntu
      service:
        name: apache2
        state: started
        enabled: yes
      when: ansible_distribution == "Ubuntu"

    - name: Start Apache service on Red Hat
      service:
        name: httpd
        state: started
        enabled: yes
      when: ansible_distribution == "RedHat"







---
- name: Install HTTP server conditionally for Ubuntu and Red Hat
  hosts: all
  become: yes
  tasks:
    - name: Install Apache on Ubuntu
      apt:
        name: apache2
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Start Apache service on Ubuntu
      service:
        name: apache2
        state: started
        enabled: yes
      when: ansible_distribution == "Ubuntu"





tags in anisble
===============

In Ansible, a tag is a label that you can assign to tasks, plays, or roles in your playbook. Tags allow you to selectively run specific parts of your playbook without executing the entire playbook. This can be especially useful for larger playbooks where you may want to test or apply only certain tasks.




---
- name: Install and configure Apache HTTP server
  hosts: all  
  become: true 

  tasks:
    - name: Install httpd
      yum:  # Use yum for Red Hat/CentOS or dnf for newer versions
        name: httpd
        state: present
      tags: install

    - name: Ensure httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: true
      tags: configure

    - name: Copy custom index.html to the web root
      copy:
        src: index.html  # Path to your local index.html file
        dest: /var/www/html/index.html  # Destination on the target server
      tags: deploy



ansible-playbook name.yaml --syntax-check

ansible-playbook name.yaml --list-tags

ansible-playbook your_playbook.yml --tags "deploy"  --> to run the playbook


ansible-playbook manage_web_server.yml --skip-tags start  --> to skip the particular task.







roles in ansible
================

Roles in Ansible are a way to organize playbooks into reusable components.

Creating a Role
----------------

--> To create a role, you can use the ansible-galaxy command:

ansible-galaxy init httpd



 Directory Structure for the Role

The role will have a similar structure to before but will include a `templates` directory for the `index.html` template file, and a `vars` directory for the `vars.yaml` file.


roles/
├── apache
│   ├── tasks/
│   │   └── main.yml
│   ├── templates/
│   │   └── index.html
│   ├── vars/
│   │   └── main.yml  # This will reference vars.yaml (the file you mentioned)
│   ├── defaults/
│   │   └── main.yml  # Default values for any variables
│   ├── handlers/
│   │   └── main.yml  # Handlers for tasks like restarting services
│   └── meta/
│       └── main.yml


 Step-by-Step Conversion

1. Create the role directory structure.
2. Move the tasks to the `tasks/main.yml` file.
3. Move the `index.html` template to the `templates/` directory.
4. Move the `vars.yaml` to the `vars/main.yml` file (if necessary).
5. Define the handler to restart the HTTP service in `handlers/main.yml`.

---

 Role Files

# 1. `roles/apache/tasks/main.yml`

yaml
---
# tasks/main.yml

- name: Install Apache HTTP Server
  yum:
    name: "{{ apache_package_name }}"
    state: present
  tags: install

- name: Ensure httpd is started and enabled
  service:
    name: httpd
    state: started
    enabled: true
  tags: configure

- name: Copy custom index.html to the web root
  template:
    src: index.html  # Path to your local index.html template
    dest: /var/www/html/index.html  # Destination on the target server
  notify:
    - restarting httpd
  tags: deploy


# 2. `roles/apache/templates/index.html`

Place your `index.html` file in this directory. This will be a template that Ansible can process, and if necessary, you can include variables in this file (e.g., `{{ some_variable }}`) to make it dynamic.

Example `index.html` (with a simple template):


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to Apache</title>
</head>
<body>
    <h1>Welcome to {{ apache_server_name }}!</h1>
    <p>This page is served by Apache on {{ ansible_hostname }}.</p>
</body>
</html>


# 3. `roles/apache/vars/main.yml`

Here, you can define the variables used by the playbook. For example, you can define the `apache_package_name` or any other variables that make the role more configurable.

yaml
---
# vars/main.yml

apache_package_name: httpd
apache_server_name: "My Apache Server"


# 4. `roles/apache/defaults/main.yml`

You can specify default values for variables here. These defaults can be overridden by the `vars/main.yml` or playbook.

yaml
---
# defaults/main.yml

apache_package_name: httpd
apache_server_name: "Default Apache Server"


# 5. `roles/apache/handlers/main.yml`

This file will contain the handler to restart the `httpd` service.

yaml
---
# handlers/main.yml

- name: restarting httpd
  service:
    name: httpd
    state: restarted


# 6. `roles/apache/meta/main.yml`

This file is for role metadata, including dependencies. For now, you can leave it empty unless you have dependencies.

yaml
---
# meta/main.yml

dependencies: []


 Using the Role in a Playbook

Now that the role is created, you can use it in your playbook by specifying the `vars.yaml` file and referencing the role.

# Main Playbook

yaml
---
- name: Install and configure httpd on all servers
  hosts: all  
  gather_facts: no  # set to yes so we can use ansible facts like ansible_hostname
  become: true  
  vars_files:
    - vars.yaml  # This file will be referenced in the playbook
  roles:
    - httpd


# `vars.yaml` File (if it's separate from `vars/main.yml`)

If you are using an external `vars.yaml` file, it can be placed alongside the playbook:

yaml
---
# vars.yaml

apache_server_name: "Custom Apache Server"


 Final Notes:

- Modularity: The role is now modular and can be reused across multiple playbooks.
- Customizability: You can customize the Apache server name, package name, and other variables by modifying `vars/main.yml` or the `vars.yaml` file.
- Template: The `index.html` template allows for dynamic content generation based on Ansible facts or variables. For example, `{{ ansible_hostname }}` can be used to display the host’s name in the web page.










Ansible vault
==============

Ansible Vault is a feature that allows you to encrypt sensitive data such as passwords, SSH keys, and API tokens inside Ansible playbooks or inventory files. This ensures that sensitive information is securely stored and only accessible with a password.

---

 Step 1: Create an Encrypted File
-------
First, create a vault-encrypted file to store sensitive data.


ansible-vault create secret.yml


- Enter a vault password (remember this, you’ll need it later).
- A text editor opens. Add the following sensitive data:


db_password: "SuperSecretPassword123"
api_key: "abcdef1234567890"





Step 2: View the Encrypted File
-------

Now, check how Ansible Vault has encrypted your file:


cat secret.yml


✅ Expected Output:  
The file should appear fully encrypted, something like this:


$ANSIBLE_VAULT;1.1;AES256
6162636465663738393031323334353637383930...


---

Step 3: Edit the Encrypted File
-------

To modify the vault-encrypted file, use:


ansible-vault edit secret.yml


🔹 Enter the vault password.  
🔹 Make changes to the file (e.g., update the password).  
🔹 Save and exit.

---

Step 4: Decrypt the File (Optional)
--------

If you need to remove encryption and see plain text:


ansible-vault decrypt secret.yml


Now, check the file:


cat secret.yml


✅ It should now be readable as normal YAML.

---

Step 5: Re-Encrypt the File
-------

To re-encrypt a decrypted file:


ansible-vault encrypt secret.yml


Enter the vault password, and it will be encrypted again.

---

Step 6: Use Vault in a Playbook
-------

Let’s create a playbook that uses the vault-encrypted variables.

🔹 Create `playbook.yml`:

yaml
---
- name: Test Ansible Vault
  hosts: all
  vars_files:
    - secret.yaml
  tasks:
    - name: Print sensitive variables
      debug:
        msg: "The database password is {{ db_password }}"


Run the playbook with Vault:


ansible-playbook vaulttest.yaml --ask-vault-pass


✅ Expected Output:
json
TASK [Print sensitive variables] 
ok: [localhost] => {
    "msg": "The database password is SuperSecretPassword123"
}


---

Step 7: Use Vault with a Password File
-------

Instead of manually entering the vault password, store it in a file:

1️⃣ Create a password file:


echo "kkdevops" > vault-password.txt
chmod 600 vault-password.txt


2️⃣ Run the playbook using the password file:


ansible-playbook vaulttest.yaml --vault-password-file password.txt


✅ No need to type the password manually!

---

 🎯 Summary
- `ansible-vault create secret.yml` → Create encrypted file  
- `ansible-vault view secret.yml` → View encrypted content  
- `ansible-vault edit secret.yml` → Modify encrypted content  
- `ansible-vault decrypt secret.yml` → Remove encryption  
- `ansible-vault encrypt secret.yml` → Re-encrypt file  
- Use `--ask-vault-pass` or `--vault-password-file` for automation  

---

# 🔥 Bonus: Encrypt an Entire Playbook
Instead of encrypting just variables, encrypt an entire playbook:

bash
ansible-vault encrypt playbook.yml


Run it:

bash
ansible-playbook playbook.yml --ask-vault-pass





NOTE : if you want to reset the password ,pls use below command

ansible-vault rekey abc.yaml



⚠️ Important
❌ There is NO way to recover a lost vault password.
✅ Always keep a backup of unencrypted files before encrypting.





📝 Introduction to Ansible Dynamic Inventory
==============================================
Ansible Inventory is the list of hosts (servers) that Ansible manages. By default, Ansible uses a static inventory file (e.g., inventory.ini), where hosts and groups are manually defined.

However, in cloud environments like AWS, servers are dynamic—they are created and terminated frequently. Manually updating inventory files becomes inefficient and error-prone.

🔹 What is Ansible Dynamic Inventory?
=====================================

Ansible Dynamic Inventory automatically retrieves real-time information about cloud instances, virtual machines, or containers from external sources like AWS, Azure, GCP, or Kubernetes.

Instead of maintaining a static hosts file, Ansible queries the cloud provider’s API and dynamically builds the inventory.

💡 Why Use Dynamic Inventory?
✅ No Manual Updates – Automatically detects new servers and removes old ones.
✅ Works with Cloud – Fetches real-time AWS EC2 instances, Azure VMs, or Kubernetes pods.
✅ Uses Tags and Filters – Group hosts based on tags (e.g., all web servers, db servers).
✅ Efficient and Scalable – Ideal for large-scale cloud environments.




---

 **📌 Prerequisites**
1. **AWS Account** with proper IAM permissions.
2. **Ansible installed** on a control node (Linux/macOS).
3. **Python and Boto3** installed on the control node.
4. **AWS CLI installed** and configured with access keys.

---

 **1️⃣ Install Required Dependencies**
Ensure you have the required Python packages installed:

sudo yum update -y
sudo yum install python3 -y
sudo yum install python3-pip -y

pip3 --version


sudo pip install boto3 botocore

#pip install ansible


---

 **2️⃣ Configure AWS Credentials**
Ansible needs access to AWS. You can set up your credentials using:

AWS cli
-------
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo yum install unzip -y
unzip awscliv2.zip
sudo ./aws/install
aws --version






aws configure



[default]
aws_access_key_id = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_KEY
region = ap-south-1



---

 **3️⃣ Enable Ansible AWS Collection**
Ensure the AWS collection is installed:


ansible-galaxy collection install amazon.aws


---

 **4️⃣ Create a Dynamic Inventory File**
Ansible provides a **dynamic inventory plugin** for AWS.

📌 Create an inventory configuration file:

mkdir -p ~/ansible/inventory
cd ~/ansible/inventory


Create a file `aws_ec2.yml`:

plugin: amazon.aws.aws_ec2
regions:
  - ap-south-1
filters:
  instance-state-name: running
keyed_groups:
  - key: tags.Name
    prefix: "tag_"
compose:
  ansible_host: public_ip_address


---

 **5️⃣ Verify the Dynamic Inventory**
Run the following command to ensure Ansible can fetch instances:


ansible-inventory -i aws_ec2.yml --list



If everything is set up correctly, you should see a JSON output of AWS EC2 instances.

---

 **6️⃣ Run Ansible Commands on AWS Instances**
 **📌 Example: Ping all AWS EC2 Instances**

ansible all -i aws_ec2.yml -m ping -u ec2-user --private-key /home/ec2-user/kkdevopsbl3b2.pem


ansible tag__Hosts -i aws_ec2.yml -m ping -u ec2-user --private-key /home/ec2-user/kkdevopsbl3b2.pem



 **📌 Example: Run a Command on all EC2 instances**


 ansible all -i aws_ec2.yml -m shell -a "uptime" -u ec2-user --private-key /home/ec2-user/kkdevopsbl3b2.pem


---

 **7️⃣ Create & Run a Playbook**
📌 **Create a playbook** `install_apache.yml`:
yaml
- name: Install Apache on AWS EC2
  hosts: tag_WebServers
  become: yes
  tasks:
    - name: Install Apache
      ansible.builtin.yum:
        name: httpd
        state: present

    - name: Start Apache Service
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: yes


📌 **Run the playbook**:

ansible-playbook -i aws_ec2.yml gitInstall.yaml -u ec2-user --private-key /home/ec2-user/kkdevopsbl3b2.pem



---

 **📌 Summary**
1. Install `boto3` and `ansible-galaxy collection install amazon.aws`
2. Set up AWS credentials.
3. Create `aws_ec2.yml` for dynamic inventory.
4. Test with `ansible-inventory --list`
5. Run Ansible commands on AWS EC2 instances.
6. Deploy Playbooks dynamically.

This should be a **practical and engaging session** for your students. Let me know if you need any modifications or additional examples! 🚀



